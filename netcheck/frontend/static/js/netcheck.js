$(document).ready(function () {
	$('.drag').draggable({
		appendTo: 'body',
		helper: 'clone'
	});

	$('#dropzone').droppable({
		activeClass: 'active',
		hoverClass: 'hover',
		accept: ":not(.ui-sortable-helper)", // Reject clones generated by sortable
		drop: function (e, ui) {
			var $el = $('<div class="drop-item"><details><summary>' + ui.draggable.text() + '</summary><div><label>More Data</label> <input id="test_details" type="text" /></div></details></div>');
			$el.append($('<button type="button" class="btn btn-default btn-xs remove"><span class="bi bi-trash"></span></button>').click(function () { $(this).parent().detach(); }));
			$(this).append($el);
		}
	}).sortable({
		items: '.drop-item',
		sort: function () {
			// gets added unintentionally by droppable interacting with sortable
			// using connectWithSortable fixes this, but doesn't allow you to customize active/hoverClass options
			$(this).removeClass("active");
		}
	});

	$("#custom_validation_form").submit(function () {

		var value = $("#dropzone").html();
		console.log(value)
	});

	(() => {
		'use strict';
	  
		// Fetch all the forms we want to apply custom Bootstrap validation styles to
		const forms = document.querySelectorAll('.needs-validation');
	  
		// Loop over them and prevent submission
		Array.prototype.slice.call(forms).forEach((form) => {
		  form.addEventListener('submit', (event) => {
			if (!form.checkValidity()) {
			  event.preventDefault();
			  event.stopPropagation();
			}
			form.classList.add('was-validated');
		  }, false);
		});
	  })();

});

function saveTextAsFile(textToWrite, fileNameToSaveAs) {
	var textFileAsBlob = new Blob([textToWrite], { type: 'text/plain' });
	var downloadLink = document.createElement("a");
	downloadLink.download = fileNameToSaveAs;
	downloadLink.innerHTML = "Download File";
	if (window.webkitURL != null) {
		// Chrome allows the link to be clicked
		// without actually adding it to the DOM.
		downloadLink.href = window.webkitURL.createObjectURL(textFileAsBlob);
	}
	else {
		// Firefox requires the link to be added to the DOM
		// before it can be clicked.
		downloadLink.href = window.URL.createObjectURL(textFileAsBlob);
		downloadLink.onclick = destroyClickedElement;
		downloadLink.style.display = "none";
		document.body.appendChild(downloadLink);
	}

	downloadLink.click();
}

function sendTestDetails() {
	// const drops = document.getElementById("dropzone").innerHTML
	const test_details = document.querySelectorAll("summary")
	const user_test_name = document.getElementById("testName").value;
	const test_data = [];

	for (let i = 0; i < test_details.length; i++) {
		test_data.push(test_details[i].textContent)
	}
	console.log(test_data)
	// TODO: Capture each node element in NodeList and send as array in POST to backend

	var xhr = new XMLHttpRequest();
	xhr.open("POST", "/custom-post", true);
	xhr.setRequestHeader('Content-Type', 'application/json');
	xhr.send(JSON.stringify({
		"test_name": user_test_name,
		"tests": test_data
	}));
}
